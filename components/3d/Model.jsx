/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/model.glb --transform 
Files: public/model.glb [52.59MB] > D:\Freelance\apex-config\model-transformed.glb [1.42MB] (97%)
*/

import React from "react";
import { useGLTF } from "@react-three/drei";
import A320MM from "./A320MM";
import A400MM from "./A400MM";
import A450MM from "./A450MM";
import B320MM from "./B320MM";
import B400MM from "./B400MM";
import B450MM from "./B450MM";
import C320MM from "./C320MM";
import C400MM from "./C400MM";
import C450MM from "./C450MM";
import useModelStore from "@/store/useModelStore";
import * as THREE from "three";

export default function Model(props) {
  const { nodes, materials } = useGLTF("/model-transformed.glb");
  const { selectedModel } = useModelStore();
  const renderSelectedModel = () => {
    switch (selectedModel) {
      case "A320MM":
        return <A320MM />;
      case "A400MM":
        return <A400MM />;
      case "A450MM":
        return <A450MM />;
      case "B320MM":
        return <B320MM />;
      case "B400MM":
        return <B400MM />;
      case "B450MM":
        return <B450MM />;
      case "C320MM":
        return <C320MM />;
      case "C400MM":
        return <C400MM />;
      case "C450MM":
        return <C450MM />;
      default:
        return null;
    }
  };

  return (
    <group
      scale={0.015}
      position={[0, 0.5, 0]}
      rotation={[-1.6, 0, 0]}
      {...props}
      dispose={null}
    >
      <mesh
        geometry={nodes.Shaft_Shovel_003.geometry}
        material={materials.Shaft_Chrome}
      />
      <mesh
        geometry={nodes.Hydraulic_Cylinder_Tube_004.geometry}
        material={materials.Connectors_Chrome}
      />
      <mesh
        geometry={nodes.Hydraulic_Cylinder_Tube001.geometry}
        material={materials.Window_s_Rubber}
      />
      <mesh
        geometry={nodes.Hydraulic_Cylinder_Cover_002.geometry}
        material={materials.Hydraulic_Cylinder_Black_Paint}
      />
      <mesh
        geometry={nodes.Stand001.geometry}
        material={materials.back_light}
      />
      <mesh
        geometry={nodes.Back_LightBulb001.geometry}
        material={materials.back_light_1}
      />
      <mesh
        geometry={nodes.Levers_Plast001.geometry}
        material={materials.Black_Plast}
      />
      <mesh
        geometry={nodes.Levers001.geometry}
        material={materials.Bottom_Black_Met}
      />
      <mesh
        geometry={nodes.Front_Door_Bolts001.geometry}
        material={materials.Track_Mechanism_Black_Met}
      />
      <mesh
        geometry={nodes.Interior_Details001.geometry}
        material={materials.Cab_Interior}
      />
      <mesh
        geometry={nodes.Headlight001.geometry}
        material={materials.Headlight_Glass}
      />
      <mesh
        geometry={nodes.Back_Light_White001.geometry}
        material={materials.Back_Light_Glass}
      />
      <mesh
        geometry={nodes.Wiper001.geometry}
        material={materials.Cab_Black_Met}
      />
      <mesh
        geometry={nodes.Back_Wheel_Left001.geometry}
        material={materials.Wheels_Black_Met}
      />
      <mesh
        geometry={nodes.Back_Glass001.geometry}
        material={materials.Glass}
      />
      <mesh
        geometry={nodes.Bumper001.geometry}
        material={materials.Bumper_Black_Met}
      />
      <mesh
        geometry={nodes.Hood_Cover001.geometry}
        material={
          new THREE.MeshStandardMaterial({
            color: "#ff0000",
            metalness: 0.5,
            roughness: 0.5,
          })
        }
      />
      <mesh
        geometry={nodes.Bottom_Body001.geometry}
        material={materials.Body_Bottom}
      />
      <mesh geometry={nodes.Black_Box001.geometry} material={materials.Black} />
      <mesh
        geometry={nodes.Body_Side001.geometry}
        material={
          new THREE.MeshStandardMaterial({
            color: "#fff",
            metalness: 0.5,
            roughness: 0.5,
          })
        }
        texture={nodes.Body_Side001.texture}
      />
      <mesh
        geometry={nodes.Dipper_Stick001.geometry}
        material={
          new THREE.MeshStandardMaterial({
            color: "#fff",
            metalness: 0.5,
            roughness: 0.5,
          })
        }
      />
      {/* <mesh
        geometry={nodes.Track_Right_151.geometry}
        material={materials.Tracks_Rubber}
      /> */}

      {renderSelectedModel()}
      <mesh
        geometry={nodes.Shovel001.geometry}
        material={materials.Shovel_Black_Met}
      />
    </group>
  );
}

useGLTF.preload("/model-transformed.glb");
